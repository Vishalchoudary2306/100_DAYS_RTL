module clock_divider(clk,reset,clk_2,clk_4,clk_8,count);
input clk,reset;
output reg clk_2;
output reg clk_4;
output reg clk_8;
output reg [3:0]count;
always@(posedge clk)
begin
if (reset==1)
count<=4'b0000;
else
count=count+1;
clk_2 =count[1];
clk_4=count[2];
clk_8=count[3];
end
endmodule
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TESTBENCH
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
module clk_divide_tb();

reg clk=0;
reg reset;
wire clk_2, clk_4, clk_8;
wire [3:0] count;

clock_divider dut(clk, reset, clk_2, clk_4, clk_8, count);

begin
    always #5 clk = ~clk;
end
initial begin
reset=0;
#10 reset=1;
#10 reset=0;
#40 $finish;

end
endmodule
