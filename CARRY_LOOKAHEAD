module Carrylook_ahead (
    input [3:0] a, b,
    input cin,
    output [3:0] sum,
    output cout
);


wire [3:0] g;
wire [3:0] p;
wire c0, c1, c2, c3;


assign g[0] = a[0] & b[0];
assign g[1] = a[1] & b[1];
assign g[2] = a[2] & b[2];
assign g[3] = a[3] & b[3];


assign p[0] = a[0] ^ b[0];
assign p[1] = a[1] ^ b[1];
assign p[2] = a[2] ^ b[2];
assign p[3] = a[3] ^ b[3];


assign sum[0] = p[0] ^ cin;
assign sum[1] = p[1] ^ c0;
assign sum[2] = p[2] ^ c1;
assign sum[3] = p[3] ^ c2;


assign c0 = g[0] | (p[0] & cin);
assign c1 = g[1] | (p[1] & g[0]) | (p[1] & p[0] & cin);
assign c2 = g[2] | (p[2] & g[1]) | (p[2] & p[1] & g[0]) | (p[2] & p[1] & p[0] & cin);
assign c3 = g[3] | (p[3] & g[2]) | (p[3] & p[2] & g[1]) | (p[3] & p[2] & p[1] & g[0]);


assign cout = c3;

endmodule


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TESTBENCH
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

module Carrylook_ahead_tb();



reg [3:0] a, b;
reg cin;
wire [3:0] sum;
wire cout;
Carrylook_ahead DUT(a,b,cin,sum,cout);

initial 
begin

a = 4'b0011;b = 4'b0101;cin = 0;#10;
a = 4'b0110;b = 4'b0011;cin = 1;#10;
a = 4'b0111;b = 4'b0001;cin = 0;#10;
a = 4'b0111;b = 4'b0001;cin = 1;#10;


$finish;
    
   
end

endmodule
